<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.write" module="bach">

	<digest>
		Write an llll to disk
	</digest>

	<description>
		Writes an llll to a file.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				Write the llll
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				llll to store
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--ARGUMENTS-->
	<objarglist>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="llll">
			<arglist />
			<digest>
				Store the llll to be written
			</digest>
			<description>
				In second inlet:
				the llll is stored, to be written upon reception of a <m>write</m> or <m>writetxt</m> message.
			</description>
		</method>
		<method name="write">
			<arg name="file_name" optional="1" type="symbol" />
			<digest>
				Write the llll in native format
			</digest>
			<description>
				Syntax: <b>write <m>[&lt;symbol: file_name&gt;]</m> </b><br />
				Examples:<br />
				• <b>write</b>   <i>→ export the llll, opening a dialog box for the file name</i><br />
				• <b>write myfile.llll</b>   <i>→ export the llll with the provided file name</i><br />
				<br />
				In first inlet:
				the stored llll is written to the specified file in native format.
				Native format is not easily editable outside Max
				but it yields exact storage of floating-point numbers.
				If no file name is provided, a dialog box will open.
			</description>
		</method>
		<method name="writetxt">
			<arg name="filename" optional="1" type="symbol" />
			<digest>
				Write the llll in text format
			</digest>
			<description>
				Syntax: <b>writetxt <m>[&lt;symbol: filename&gt;]</m> <i>[message attributes]</i> </b><br />
				Examples:<br />
				• <b>writetxt</b>   <i>→ export the llll as a text file, opening a dialog box for the file name</i><br />
				• <b>writetxt myfile.txt</b>   <i>→ export the llll as a text file with the provided file name</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3</b>   <i>→ export the llll with a floating-point precision of 3 decimal digits</i><br />
				• <b>writetxt myfile.txt @maxdecimals 3 @wrap 40</b>   <i>→ as the above, limiting the length of each line to 40 characters</i><br />
				• <b>writetxt myfile.txt @maxdepth 1</b>   <i>→ no indentation is performed</i><br />
				<br />
				Message attributes:<br />
				
<m>@indent</m> (atom, default: tab): Number of spaces for indentation or "tab" symbol<br />
				
<m>@maxdepth</m> (int, default: -1): Maximum depth for new lines<br />
				
<m>@wrap</m> (int, default: 0): Maximum number of characters per line (0 means: no wrapping)<br />
				<br />
				In first inlet:
				the stored llll is written to the specified file in text format.
				Text format is easily editable in any text editor,
				but representation of floating-point numbers is approximate.
				No limit in size is given for saving a file in text format (differently from what happens while outputting lllls as text in Max).
				If no file name is provided, a dialog box will open.
				Furthermore, some message attributes are available, for fine-tuning of the text formatting.
				Available attributes are: <br />
				- <b>maxdecimals</b> (default: 10): the precision for floating-point numbers. <br />
				- <b>indent</b> (default: <b>tab</b>): if set to <m>tab</m>, every sublist that is encountered (up to <b>maxdepth</b>, see below)
				will be placed on a new line, indented by a number of tabs equal to the depth level of the sublist itself.
				If set to an integer, the indentation for each depth level will be the corresponding number of spaces.<br />
				- <b>maxdepth</b> (default: -1, i.e. no limitation): the maximum depth at which sublists are placed in new lines.
				If negative, the depth level is counted from the innermost level of each branch of the tree.
				- <b>wrap</b> (default: 0, i.e. no wrapping): the maximum number of characters to be placed on each line.<br />
				- <b>filename</b> (default: not set): the name of the file to be written.
				If set, this specification overrides the file name set as the first message argument.
				<br />				See also:<m>write</m><br />
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The llll can be written in text or native format.
		Text format is easily editable through any text editor,
		native format yields exact storage of floats.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="bach.read" />
		<seealso name="bach.shelf" />
		<seealso name="bach.reg" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (write/writetxt)">
			<description>
				Write the llll.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				llll to store.
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The llll can be written in text or native format.
		Text format is easily editable through any text editor,
		native format yields exact storage of floats.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
write, save, disk, file, native, text.
			</description>
		</entry>
	</misc>

</c74object>