<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This file has been automatically generated by Doctor Max. DO NOT EDIT THIS FILE DIRECTLY.-->

<c74object name="bach.eval" module="bach" category="Math">

	<digest>
		Evaluate advanced expressions
	</digest>

	<description>
		Evaluates expressions with variables, branching, loops and user-defined functions.
	</description>

	<!--METADATA-->
	<metadatalist>
		<metadata name="author">bachproject</metadata>
		<metadata name="tag">bach</metadata>
		<metadata name="tag">bach objects</metadata>
		<metadata name="tag">bach llll</metadata>
		<metadata name="tag">bach math</metadata>
	</metadatalist>

	<!--INLETS-->
	<inletlist>
		<inlet id="0" type="INLET_TYPE">
			<digest>
				llll to be compared
			</digest>
			<description>
			</description>
		</inlet>
		<inlet id="1" type="INLET_TYPE">
			<digest>
				llll to be compared
			</digest>
			<description>
			</description>
		</inlet>
	</inletlist>

	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" type="INLET_TYPE">
			<digest>
				Comparison result (0/1)
			</digest>
			<description>
			</description>
		</outlet>
	</outletlist>

	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="expression" optional="1" type="anything">
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The syntax of the expression is based upon <o>bach.expr</o>'s,
				but it can contain branching and loop statements, and user-defined variables and functions.
				For a complete description of the expression syntax, please refer to the help file.
			</description>
		</objarg>
	</objarglist>

	<!--MESSAGES-->
	<methodlist>
		<method name="(doubleclick)">
			<arglist />
			<digest>
				Edit llll as text
			</digest>
			<description>
				Double-clicking on the object forces a text editor to open up, where the expression can be edited directly.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Return the result of the evaluation of the most recently received lllls and expression.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				Perform the last operation
			</digest>
			<description>
				Return the comparison result for the most recently received lllls.
			</description>
		</method>
		<method name="expr">
			<arglist />
			<digest>
				Expression to evaluate
			</digest>
			<description>
				The <m>expr</m> message, followed by a valid expression, will set the new expression to be evaluated by <o>bach.eval</o>.
				For more details on the expression syntax, please refer to <o>bach.eval</o>'s help patcher.
			</description>
		</method>
		<method name="llll">
			<arglist />
			<digest>
				Store values for the expression variables
			</digest>
			<description>
				The lllls provide the data to the expression.
				An llll received in the leftmost inlet will trigger the evaluation and cause the result to be output.
			</description>
		</method>
	</methodlist>

	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="auto" get="1" set="1" type="atom" size="1">
			<digest>
				Automatically Run Code
			</digest>
			<description>
				When set to 1, the stored code is automatically run at startup.
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Automatically Run Code" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="directins" get="1" set="1" type="atom" size="1">
			<digest>
				Number of Direct Inlets
			</digest>
			<description>
				Number of direct inlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Direct Inlets" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="directouts" get="1" set="1" type="atom" size="1">
			<digest>
				Number of Outlets
			</digest>
			<description>
				Number of direct outlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Outlets" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="embed" get="1" set="1" type="atom" size="1">
			<digest>
				Save Data With Patcher
			</digest>
			<description>
				When set to 1, the stored code is saved with the patcher.
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Save Data With Patcher" />
				<attribute name="save" get="1" set="1" type="int" size="1" value="1" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="onoff" />
			</attributelist>
		</attribute>
		<attribute name="extraoutlets" get="1" set="1" type="atom" size="1">
			<digest>
				Number of Extra Outlets
			</digest>
			<description>
				Number of data outlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Extra Outlets" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="inlets" get="1" set="1" type="atom" size="1">
			<digest>
				Number of Inlets
			</digest>
			<description>
				Number of data inlets. <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Number of Inlets" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
		<attribute name="out" get="1" set="1" type="symbol" size="1">
			<digest>
				Outlet Types
			</digest>
			<description>
				The <m>out</m> attribute is a sequence of characters identifying the outlet types (one character for each llll outlet). Characters can be one of the following: <br />
				<m>n</m> (default): 'native' output: faster and more precise between bach objects, but unreadable by standard Max objects (an "bach.llll" message appears instead). <br />
				<m>t</m>: 'text' output: slower and limited in size, but readable by standard Max objects. A plain llll in text format is a generic Max message.
				To keep the representation invertible (i.e., to allow a bach object receiving a text-format llll to interpret it exactly as if it was native format,
				except for the size limitation), some specific kinds of symbols are preceded by a backtick: namely, symbols containing parens, or containing textual
				representations of numbers or pitches, or beginning with a backtick, plus the symbols "null" and "nil" (distinct from the reserved words
				"null" and "nil" representing the empty list and the empty sublist) are preceded by a backtick. Moreover, the symbols "int", "float" or "list"
				are preceded by a backtick only if they are the first element of an llll, to distinguish them from the corresponding reserved messages of Max. <br />
				<m>m</m>: 'max' output: mostly equivalent to the "t" specifier, but no symbol is backticket except "int", "float" and "list" at the beginning of an llll.
				It is important to notice that, differently from text-format lllls proper, Max-format lllls might not be invertible even if they do not reach the size
				limit for Max message. This means that a bach object receiving a Max-format llll output from another bach object might interpret it differently
				from the original, or in some cases might even reject it. <br />
				<m>x</m>: disabled output (nothing is output) <br />
				<m>p</m>: 'portal' output: only used by bach.portal to intercept the @out attribute specified while creating the abstraction (see bach.portal). <br />
				The native output is recommended, unless communication with standard Max messages is needed.
				Disabling unused outputs can be useful if extreme optimization of the patch is needed.
				<br /> <br />
				This is a static attribute which can only be set by typing it in the object box.
				<br /> <br />
			</description>
			<attributelist>
				<attribute name="category" get="1" set="1" type="symbol" size="1" value="Behavior" />
				<attribute name="label" get="1" set="1" type="symbol" size="1" value="Outlet Types" />
				<attribute name="style" get="1" set="1" type="symbol" size="1" value="text" />
			</attributelist>
		</attribute>
	</attributelist>

	<!--DISCUSSION-->
	<discussion>
		The syntax of <o>bach.code</o> is based upon <o>bach.expr</o>'s, but a full, Turing-complete programming language is implemented.
	</discussion>

	<!--SEEALSO-->
	<seealsolist>
		<seealso name="expr" />
		<seealso name="vexpr" />
		<seealso name="bach.expr" />
		<seealso name="bach.value" />
	</seealsolist>

	<misc name = "Input">
		<entry name ="Inlet 1 (llll)">
			<description>
				llll to be compared.
			</description>
		</entry>
		<entry name ="Inlet 2 (llll)">
			<description>
				llll to be compared.
			</description>
		</entry>
	</misc>

	<misc name = "Output">
		<entry name ="Outlet 1 (int)">
			<description>
				Comparison result (0/1).
			</description>
		</entry>
	</misc>

	<misc name = "Discussion">
		<entry name ="More details">
			<description>
		The syntax of <o>bach.code</o> is based upon <o>bach.expr</o>'s, but a full, Turing-complete programming language is implemented.
			</description>
		</entry>
		<entry name ="Keywords">
			<description>
expression, evaluate, variable, number, calculate, compute, function, code, if, branching.
			</description>
		</entry>
	</misc>

</c74object>